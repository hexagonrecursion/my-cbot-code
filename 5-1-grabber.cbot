extern void Grabber() {
	Recharge();
	Goto(PowerCell);
	grab();
	Recharge();
	Goto(WingedShooter);
	drop();
	while(radar(AlienAnt) != null);
	Goto(PowerCell);
	grab();
	Recharge();
	Goto(UraniumOre);
	Goto(space());
	drop(Behind);
	grab(EnergyCell);
	drop();
	grab(Behind);
	drop(EnergyCell);
	Goto(UraniumOre);
	grab();
	Goto(SpaceShip);
	drop();
	takeoff();
}

void object::Recharge() {
	Goto(PowerStation);
	while(energyCell.energyLevel < 1);
	while(load != null && load.category == PowerCell && load.energyLevel < 1);
}

// Copied from utils.cdot

void Goto(int where) {
	Goto(WaitRadar(where));
}

void Goto(object where) {
	Goto(where.position);
}

void Goto(float x, float y) {
	point p(x, y);
	Goto(p);
}

void object::Goto(point where) {
	errmode(0);
	while(goto(where) != 0) {
		message(category + ": goto failed");
		goto(space(position, 1));
	}
	errmode(1);
}

object WaitRadar(int what) {
	object p;
	do {
		p = radar(what);
	} while (p == null);
	return p;
}

float min(float a, float b) {
	if(a < b) {
		return a;
	}
	return b;
}

float max(float a, float b) {
	if(a > b) {
		return a;
	}
	return b;
}

point add(point a, point b) {
	a.x += b.x;
	a.y += b.y;
	a.z += b.z;
	return a;
}

point sub(point a, point b) {
	a.x -= b.x;
	a.y -= b.y;
	a.z -= b.z;
	return a;
}

point mul(float f, point p) {
	p.x *= f;
	p.y *= f;
	p.z *= f;
	return p;
}

// Point + angle + length
point PAL(point p, float angle, float length) {
	p.x += length * cos(angle);
	p.y += length * sin(angle);
	return p;
}